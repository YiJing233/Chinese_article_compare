电子科技大学信息与软件工程学院    实 验 报 告    学    号 2017221005030         姓    名 刘津宁                （实验）	课程名称 数据库原理及应用      理论教师 文军                  实验教师 何中海                    电子科技大学教务处制表              电 子 科 技 大 学 实   验   报   告   一 学生姓名：刘津宁	学号：2017221005030      指导教师：何中海 实验地点：信软学院楼西303  实验时间：2019.06.14 一、实验名称：图书销售管理系统数据库SQL应用编程  二、实验学时：4 三、实验目的： 针对图书借阅管理数据库开发，掌握DDL、DML、DQL类型SQL语句在数据库操作访问中的应用方法，培养数据库SQL应用编程能力。同时也掌握基本的数据库触发器、存储过程编程方法，培养数据库后端编程能力。本实验还需要培养数据库SQL应用编程的复杂工程问题解决能力。  四、实验原理： 图书销售管理系统数据库SQL应用编程涉及相关知识点： （1）数据库对象（方案、表、索引、视图等）DDL编程应用解决数据库实现及性能优化； （2）数据库数据增、删、查、改DML编程应用解决数据操作访问； （3）数据库触发器、数据库函数编程应用解决业务规则及后端功能实现。  五、实验内容： （1）图书销售管理系统数据库BookSale创建操作 （2）在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 （3）对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 （4）编写函数Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 （5）编写过程语句块，实现对函数Pro_CurrentSale的调用，并输出统计结果。 （6）编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 （7）对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。  六、实验器材（设备、元器件）： 实验PC计算机  实验步骤： （1）图书销售管理系统数据库BookSale创建操作 （2）在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 （3）对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 （4）编写函数Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 （5）编写过程语句块，实现对函数Pro_CurrentSale的调用，并输出统计结果。 （6）编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 （7）对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。      八、实验结果与分析（含重要数据结果分析或核心代码流程分析） （1）图书销售管理系统数据库BookSale创建操作   在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 创建表SQL语句： create table Auther (   AU_ID	   CHAR(18)	   not null,   AU_Name	 VARCHAR(20)	not null,   AU_Gender 	CHAR(2) 	not null,   AU_Phone  	VARCHAR(11) 	not null,   AU_Address	VARCHAR(50)	 not null,   constraint PK_AUTHER primary key (AU_ID) ); create table Book (   Book_ISBN   CHAR(13)   not null,   AU_ID 	CHAR(18)	null,   PUB_ID	CHAR(11)	null,   Book_Name	  VARCHAR(50)	not null,   Book_Pubdate	  DATE 	not null,   Book_Price	MONEY	not null,   Book_Category	 VARCHAR(20)	not null,   Book_Stock	INT4	not null,   Book_Notes	VARCHAR(100)	null,   Book_List	 VARCHAR(100)	null,   constraint PK_BOOK primary key (Book_ISBN) );  create table CUSTOMER (   CUST_ID	 CHAR(18)	not null,   CUST_Name	VARCHAR(20) 	not null,   CUST_Phone	VARCHAR(15)  not null,    CUST_Address    VARCHAR(50)     not null,   CUST_Email	VARCHAR(50) not null,    constraint PK_CUSTOMER primary key (CUST_ID) );  create table Publisher (   PUB_ID	CHAR(11)	not null,   PUB_Name	VARCHAR(20)         not null,   PUB_Phone	VARCHAR(15)    not null,    PUB_Address     VARCHAR(50)     not null,    constraint PK_PUBLISHER primary key (PUB_ID) );  create table Sale ( SALE_ID	VARCHAR(11)	 not null, Book_ISBN	CHAR(13)	null, CUST_ID	CHAR(18)	null, SALE_Date	DATE	not null, SALE_QTY	INT4	not null, SALE_Amount	MONEY	not null, constraint PK_SALE primary key (SALE_ID) );  create table Stock ( Stock_ID	VARCHAR(10)	not null, Book_ISBN	CHAR(13)	null, Stock_Change	INT4	not null, Stock_Operation	CHAR(4)	not null, Stock_Datetime	DATE	not null, constraint PK_STOCK primary key (Stock_ID) );  alter table Book   add constraint FK_BOOK_BOOK_AUTH_AUTHER foreign key (AU_ID)      references Auther (AU_ID)     on delete restrict on update restrict;  alter table Book   add constraint FK_BOOK_BOOK_PUBL_PUBLISHE foreign key (PUB_ID)      references Publisher (PUB_ID)     on delete restrict on update restrict; alter table Sale   add constraint FK_SALE_BOOK_SALE_BOOK foreign key (Book_ISBN)     references Book (Book_ISBN)     on delete restrict on update restrict;  alter table Sale   add constraint FK_SALE_CUSTOMER_CUSTOMER foreign key (CUST_ID)     references CUSTOMER (CUST_ID)     on delete restrict on update restrict;  alter table Stock   add constraint FK_STOCK_BOOK_STOC_BOOK foreign key (Book_ISBN)      references Book (Book_ISBN) on delete restrict on update restrict;      创建视图SQL语句：create view BOOK_AUTHER_PUBLISHER as select B.book_name as "图书",AU.au_name as "作者",PU.pub_name as "出版社",B.book_price as "图书价格" from book as B join auther as AU on B.au_id = AU.au_id join publisher as PU on B.pub_id = PU.pub_id          对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 执行 SQL 语句，插入样本数据到图书销售数据库： Insert into Auther values('369162197706172233','天一','男','13554874593','四川省成都市成华区'); Insert into Auther values('540134199103283654','叶二','女','15812387538','天津市蓟州区'); Insert into Auther values('120225199903063698','李三','男','18575615472','北京市朝阳区'); Insert into PUBLISHER values('PUB00000001','高等教育出版社','010-65321854','北京'); Insert into PUBLISHER values('PUB00000002','人民出版社','010-65329857','北京');  Insert into PUBLISHER values('PUB00000003','人民出版社','010-65325987','北京'); Insert into BOOK values('9787115502742','369162197706172233','PUB00000001','Web 前端开发最佳实践','2016-01-01', '59','IT 技术','100'); Insert into BOOK values('9875325415577','540134199103283654','PUB00000002','C语言基础','2008-01-01', '52','IT 技术','200'); Insert into BOOK values('9865365975234','120225199903063698','PUB00000003',' 软件工程基础','2013-08-1','29','IT 技术', '150'); Insert into customer values('369162198805247775','五三','15122566523','四川省成都市成华区','123456789@qq.com'); Insert into customer values('369165197805201654','十年','15523689542','天津市蓟州区','325641987@qq.com'); Insert into customer values('135264199406031652','五年','13852603512','北京市朝阳区','852963147@qq.com');    查看customer 表数据的 SQL 语句如下： select * from customer;   增加数据：SQL 语 句 ： Insert into PUBLISHER values('PUB00000004',' 四川出版社','168-226352113','四川');    删除：SQL 语句：delete from publisher where pub_id = 'PUB00000004';   修改：SQL 语句：update publisher set pub_address = '南京' where pub_id = 'PUB00000003';    编写函数Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 创建存储过程的 SQL 语句如下。  CREATE OR REPLACE FUNCTION countsale(OUT amount int,OUT allmoney money) as $count$ BEGIN select sum(sale_qty) into amount FROM sale WHERE sale_date = '2019-05-20'; select sum(sale_amount) into allmoney FROM sale WHERE sale_date = '2019-05-20'; END; $count$ LANGUAGE plpgsql;          编写过程语句块，实现对函数Pro_CurrentSale的调用，并输出统计结果。 调用存储过程 SQL 语句如下： Select * from countsale()   编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 创建触发器函数 SQL 语句： CREATE OR REPLACE FUNCTION InsertSale() RETURNS TRIGGER AS $$ BEGIN IF (TG_OP = 'INSERT') THEN INSERT INTO stock values(new.sale_id,new.book_isbn,new.sale_qty,' 出 库 ',new.sale_date); update book set book.book_stock = book.book_stock - new.sale_qty where book.book_isbn = new.book_isbn; RETURN NEW; END IF; RETURN NULL; END; $$ LANGUAGE plpgsql;   创建触发器 SQL 语句： CREATE TRIGGER Tri_InsertSale AFTER INSERT ON SALE FOR EACH ROW EXECUTE PROCEDURE InsertSale();    （7）对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。 测试触发器 SQL 语句： Insert into sale values('SA00001','9787115502742','680554199207120325','2019-05-20',15,'885');  Insert into sale values('SA00002','9875325415577','345021198608120258','2019-05-20',20,'1040');  Insert into sale values('SA00003','9865365975234','542244197812121687','2019-05-20',50,'1450');    九、总结及心得体会： （1）熟悉使用主流的对象-关系数据库PostgreSQL管理系统软件工具pgAdmin4； （2）建立关系数据库SQL语言编程操作与后端数据库编程能力； （3）理解和掌握数据库系统的安全管理模型原理及应用操作能力； 十、对本实验过程及方法、手段的改进建议： 实验时间有点短。                                                      报告评分：                                          指导教师签字：    电 子 科 技 大 学 实   验   报   告   二 学生姓名：刘津宁	学号：2017221005030      指导教师：何中海 实验地点：信软学院楼西303  实验时间：2019.06.21 一、实验名称：图书销售管理系统数据库安全管理  二、实验学时：4 三、实验目的： 对图书销售管理系统数据库进行系统安全管理。了解该DBMS系统对数据库管理的内容与方法，特别是理解数据库安全机制和作用，以及PostgreSQL数据库角色管理、用户管理、权限管理的基本方法，培养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并完成上述角色与用户的权限管理。  四、实验原理： 图书销售管理系统数据库安全管理涉及相关知识点： （1）数据库角色、用户及权限管理； （2）图书销售管理系统数据库管理实现。  五、实验内容： （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。 （2）在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 （3）在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 （4）在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 （5）分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。  六、实验器材（设备、元器件）： 实验PC计算机           七、实验步骤： （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。 （2）在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 （3）在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 （4）在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 （5）分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。          八、实验结果与分析（含重要数据结果分析或核心代码流程分析） （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。   在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 创建客户角色SQL语句： CREATE ROLE "R_Customer"	WITH LOGIN NOSUPERUSER  NOCREATEDB  NOCREATEROLE  NOINHERIT  NOREPLICATION  CONNECTION LIMIT -1  创建商家角色SQL语句： CREATE ROLE "R_Seller"	WITH LOGIN NOSUPERUSER  NOCREATEDB  NOCREATEROLE NOINHERIT  NOREPLICATION  CONNECTION LIMIT -1    在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 赋予客户权限SQL语句： GRANT SELECT ON book TO "R_Customer"; GRANT SELECT ON auther TO "R_Customer";  GRANT SELECT ON publisher TO "R_Customer";  赋予商家权限SQL语句： GRANT SELECT,INSERT,UPDATE,DELETE ON book TO "R_Seller";  GRANT SELECT,INSERT,UPDATE,DELETE ON auther TO "R_Seller";  GRANT SELECT,INSERT,UPDATE,DELETE ON publisher TO "R_Seller"; GRANT SELECT ON stock TO "R_Seller"; GRANT SELECT,INSERT,UPDATE,DELETE ON sale TO "R_Seller";  GRANT SELECT,INSERT,UPDATE,DELETE ON customer TO "R_Seller";  在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 创建客户用户和商家用户，并将客户角色和商家角色赋予他们的SQL语句： CREATE USER "U_Customer" WITH LOGIN CONNECTION LIMIT -1 IN ROLE "R_Customer" PASSWORD '369162';  CREATE USER "U_Seller" WITH LOGIN CONNECTION LIMIT -1 IN ROLE "R_Seller" PASSWORD '369162';      分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。  （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 登录客户用户：  ①SQL 语句：select * from book   查询成功！权限正确！  ②SQL 语句：delete from book where book_isbn = '9787115502742'   删除失败！权限正确！   登录商家用户：    ①SQL 语句：delete from stock where stock_id = 'SA00001'  删除失败！权限正确！   ②SQL 语句：select * from customer  查询成功！权限正确！  九、总结及心得体会：  了解了 DBMS 系统对数据库管理的内容与方法，特别是理解数据库安全机制和作用，以及 PostgreSQL 数据库角色管理、用户管理、权限管理的基本方法，培养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并完成上述角色与用户的权限管理。  十、对本实验过程及方法、手段的改进建议： 实验时间短。