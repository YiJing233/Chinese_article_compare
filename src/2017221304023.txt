电子科技大学信息与软件工程学院    实 验 报 告    学    号     2017221304023     姓    名           倪雅琼      （实验）	课程名称     数据库原理及应用  理论教师          文军         实验教师          何中海           电子科技大学教务处制表    电 子 科 技 大 学 实   验   报   告 学生姓名：倪雅琼		学号：2017221304023         指导教师：何中海  实验地点：信软楼西303     实验时间：2019.6.14 一、实验名称：图书销售管理系统数据库SQL应用编程 二、实验学时：4 三、实验目的： 针对图书销售管理数据库开发，了解SQL语言DDL、DML、DQL类型语句在数 据库操作访问中的应用方法， 培养数据库SQL编程访问能力。 同时也掌握基本的 数据库触发器、存储过程SQL编程方法，培养数据库后端编程能力。本实验完成 图书销售管理系统数据库的SQL数据操作访问和后端数据处理功能。 四、实验原理： 1.首先对图书销售管理系统进行数据需求分析， 定义组成系统数据结构的实 体、 实体属性以及实体之间的关系。 通过建模设计工具完成系统概念数据模型设 计。进一步对图书销售管理数据库进行物理模型设计，给出数据库设计方案。 2.基于数据库设计方案， 通过SQL编程执行来完成对数据库的实现操作。 在 本实验中，使用SQL语句完成对数据库、关系表、索引、视图、触发器、存储过 程的创建， 并编写SQL语句对数据库表进行数据的增删查改操作， 以及利用视图、 存储过程、触发器实现业务数据处理。  五、实验内容： 使用pgAdmin4数据库管理工具对图书销售管理系统数据库进行SQL编程操 作，并完成触发器、存储过程后端编程，具体实验内容如下: 1.在数据库服务器中，执行SQL创建图书销售管理系统数据库BookSale。 2.在数据库BookSale中，执行SQL创建数据库表、视图、索引等对象。 3.在数据库BookSale中，执行SQL进行数据增、删、查、改访问操作。 4.在数据库BookSale中，采用PL/pgSQL语言编写存储过程函数 Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 5.在数据库BookSale中， 采用PL/pgSQL语言编写过程语句块， 实现对存储 过程函数Pro_CurrentSale的调用，并输出统计结果。 6.在数据库BookSale中，采用PL/pgSQL语言编写编写图书销售表Insert触 发器 Tri_InsertSale，实现图书库存数据同步修改处理。
 7.在数据库 BookSale 中，对图书销售表 Insert 触发器 Tri_InsertSale 程序进行
 功能验证。
 8.在数据库 BookSale 中，创建存储过程函数实现图书销售数量和金额统计。
 在实验计算机上，利用 pgAdmin4 数据库管理工具及 SQL、PL/pgSQL 语言，
 完成图书销售管理系统数据库应用编程操作，同时记录实验过程的步骤、操作、
 运行结果界面等数据，为撰写实验报告提供素材。 六、实验器材（设备、元器件）： “数据库原理及应用”实验所涉及的机房硬件设备为 pc 计算机、服务器以
 及网络环境，pc 计算机与服务器在同一局域网络。
 操作系统： Windows7 / Windows XP
 管理工具： pgAdmin4
 DBMS 系统： PostgreSQL 11
 七、实验步骤： 1. 在数据库服务器中，采用 SQL 语句执行方式，创建图书销售管理系统数
 据库 BookSale。
 2.在 BookSale 数据库中，采用 SQL 语句执行方式，创建 book（图书表）、auther
 （作者表）、publisher（出版社表）、stock（库存流水表）、customer（客户表）、
 sale（销售表），以及各表主键外键的创建，并为给表创建索引。
 3.为 book、auther、publisher、customer 表准备样本数据，采用 SQL 语句执
 行方式，将样本数据插入到表中。采用 SQL 语句对 book、auther、publisher、
 customer 表进行数据修改、删除、查询、统计等访问操作。
 4.创建视图 BOOK_AUTHER_PUBLISHER，该视图查询数据库，输出图书名、
 作者、出版社以及图书价格等数据。对视图 Book_View 进行数据查询访问操作。
 5.编写触发器函数，实现在 sale 表数据插入时，级联操作 stock 表，将图书
 的库存流水进行记录，同时级联更新 book 表中对应图书的库存数据。
 6.创建完触发器函数之后，创建相对应的触发器，实现上一步中提到的功能。
 7.测试触发器的功能，准备 sale 表的样本数据，并将其插入 sale 表，插入之
 后查看 stock 表是否有对应的更新，并对比插入 sale 数据前后 book 中对应数据
 的修改情况。
 8.编写存储过程函数，实现统计某日图书的销售总量以及总金额数据。
 9.调用存储过程函数，查看输出结果是否准确实现业务数据处理功能。  八、实验结果与分析（含重要数据结果分析或核心代码流程分析） 1.创建BookSale数据库 语句为：CREATE DATABASE BookSale;  成功创建数据库  2.创建各种数据库表，主外键约束和索引 SQL语句： CREATE TABLE AUTHOR(   AU_ID  char(18)  NOT NULL,   AU_Name  varchar(20)  NOT NULL,   AU_Gender  char(2)  NOT NULL,   AU_Phone  char(20)  NOT NULL,   AU_Address  varchar(11)  NOT NULL,   CONSTRAINT PK_AUTHOR PRIMARY KEY(AU_ID) );  CREATE TABLE PUBLISHER(   PUB_ID  char(11)  NOT NULL,   PUB_Name  varchar(20)  NOT NULL,   PUB_phone varchar(15)  NOT NULL,   PUB_Address varchar(50) NOT NULL,   CONSTRAINT PK_PUBLISHER PRIMARY KEY(PUB_ID) );  CREATE TABLE BOOK(   BOOK_ISBN  char(13)  NOT NULL,   AU_ID  char(18)  NULL,   PUB_ID  char(11)  NULL,   BOOK_Name  varchar(50)  NOT NULL,   BOOK_Pubdate  date  NOT NULL,   BOOK_Price money NOT NULL,   BOOK_Category  varchar(20)  NOT NULL,   BOOK_Stock  int4 NOT NULL,   CONSTRAINT PK_BOOK PRIMARY KEY(BOOK_ISBN),   CONSTRAINT FK_BOOK_AUTHOR FOREIGN KEY(AU_ID)   REFERENCES AUTHOR(AU_ID)   ON DELETE RESTRICT   ON UPDATE RESTRICT,   CONSTRAINT FK_BOOK_PUBLISHER FOREIGN KEY(PUB_ID)   REFERENCES PUBLISHER(PUB_ID)   ON DELETE RESTRICT   ON UPDATE RESTRICT );  CREATE TABLE CUSTOMER(   CUS_ID  char(18)  NOT NULL,   CUS_Name  varchar(20)  NOT NULL,   CUS_Phone  varchar(15)  NOT NULL,   CUS_Address  varchar(50)  NOT NULL,   CONSTRAINT PK_CUSTOMER PRIMARY KEY(CUS_ID) );  CREATE TABLE SALE(   SALE_ID  varchar(11)  NOT NULL,   BOOK_ISBN  char(13)  NULL,   CUS_ID  char(18)  NULL,   SALE_Date  date  NOT NULL,   SALE_Amount  money  NOT NULL,   SALE_QTY  INT4  NOT NULL,   CONSTRAINT FK_SALE_BOOK FOREIGN KEY(BOOK_ISBN)   REFERENCES BOOK(BOOK_ISBN)   ON DELETE RESTRICT   ON UPDATE  RESTRICT,   CONSTRAINT FK_SALE_CUSTOMER FOREIGN KEY(CUS_ID)   REFERENCES CUSTOMER(CUS_ID)   ON  DELETE RESTRICT   ON UPDATE RESTRICT );  CREATE TABLE STOCK(   STOCK_ID  varchar(10)  NOT NULL,   BOOK_ISBN  char(13)  NULL,   STOCK_Change  int4  NOT NULL,   STOCK_Operation  char(4)  NOT NULL,   STOCK_Datetime  date  NOT NULL,   CONSTRAINT PK_STOCK PRIMARY KEY(STOCK_ID),   CONSTRAINT FK_STOCK_BOOK FOREIGN KEY(BOOK_ISBN)   REFERENCES BOOK(BOOK_ISBN)   ON DELETE RESTRICT   ON UPDATE RESTRICT ); 结果及表界面：   创建表成功 3.向表中插入数据 SQL语句： INSERT INTO AUTHOR VALUES('0001','八月','女','12','哈尔滨'); INSERT INTO AUTHOR VALUES('0002','VI','女','23','瑞士'); INSERT INTO AUTHOR VALUES('0003','鲁迅','男','34','绍兴');  INSERT INTO PUBLISHER VALUES('P001','电子出版社','0987','成都'); INSERT INTO PUBLISHER VALUES('P002','人民出版社','9867','上海'); INSERT INTO PUBLISHER VALUES('P003','北师大出版社','4567','北京');  INSERT INTO BOOK VALUES('ISBN1','0001','P001','最好的我们','2015-07-16','30','青春文学','20'); INSERT INTO BOOK VALUES('ISBN2','0002','P002','寻找前世之旅','2016-09-26','40','奇幻穿越','30'); INSERT INTO BOOK VALUES('ISBN3','0003','P003','朝花夕拾','1925-01-29','20','怀旧散文','40');  INSERT INTO CUSTOMER VALUES('C001','耿耿','8764','青岛'); INSERT INTO CUSTOMER VALUES('C002','余淮','5639','青岛'); INSERT INTO CUSTOMER VALUES('C003','叶隐','3429','南京');  向表中插入数据成功！ 4.对AUTHOR表进行增删查改操作 原AUTHOR表内容：  插入新数据  插入数据后新AUTHOR表内容：  从表中删除新插入的数据：  删除后表内容：  更新表中数据：  更新后表内容：   5.创建视图 SQL语句： CREATE VIEW BOOK_AUTHOR_PUBLISHER AS SELECT A.AU_Name AS 作者,B.BOOK_Name AS 图书名,B.BOOK_Price AS 图书价格,P.PUB_Name AS 出版社 FROM AUTHOR AS A,BOOK AS B,PUBLISHER AS P WHERE P.PUB_ID=B.PUB_ID AND A.AU_ID=B.AU_ID;  采用视图查询：  视图创建成功！  6.创建触发器函数 SQL： CREATE OR REPLACE FUNCTION Tri()   RETURNS TRIGGER AS $Tri$   BEGIN     IF(TG_OP='INSERT') THEN 	INSERT INTO STOCK VALUES(NEW.SALE_ID,NEW.BOOK_ISBN,new.SALE_QTY,'出库',new.SALE_DATE); 	UPDATE BOOK SET BOOK.BOOK_STOCK=BOOK.BOOK_STOCK-NEW.SALE_QTY 	WHERE BOOK.BOOK_ISBN=NEW.BOOK_ISBN; 	RETURN NEW; 	END IF; 	RETURN NULL; 	END; $Tri$ LANGUAGE plpgsql;  触发器函数创建成功！ 7.创建触发器 SQL: CREATE TRIGGER Tri_InsertSale AFTER INSERT ON SALE FOR EACH ROW EXECUTE PROCEDURE Tri();  触发器创建成功！  8.测试触发器 向SALE表中插入数据 SQL： INSERT INTO SALE VALUES('S001','ISBN1','C001','2019-06-18','600','20'); INSERT INTO SALE VALUES('S002','ISBN2','C002','2019-06-18','1200','30'); INSERT INTO SALE VALUES('S003','ISBN3','C003','2019-06-18','2000','40');  查看STOCK表的数据：  根据STOCK表的数据可以看出触发器功能正确！ 9.创建存储过程 SQL： CREATE OR REPLACE FUNCTION Pro_CurrentSale(OUT saleAmount int4,OUT salePrice money)   RETURNS record AS $$      BEGIN      SELECT SUM(SALE_QTY) INTO saleAmount 	 FROM SALE 	 WHERE SALE_DATE='2019-06-18'; 	 SELECT SUM(SALE_AMOUNT) INTO salePrice 	 FROM SALE 	 WHERE SALE_DATE='2019-06-18'; 	 RETURN;   END;   $$ LANGUAGE plpgsql;  10.调用存储过程 SQL: SELECT * FROM Pro_CurrentSale();  存储过程功能正确！ 九、总结及心得体会： 通过本次实验，我对postgre数据库中表的创建、数据增删改查以及触发器、存储过程的创建及用法有了更加深刻的理解。向表中插入数据的过程中要注意各个表的外键约束，否则很容易出现错误。 十、对本实验过程及方法、手段的改进建议： 实验效果显著，收获颇丰，无需改进。                                                      报告评分：                                          指导教师签字： 电子科技大学信息与软件工程学院    实 验 报 告    学    号     2017221304023     姓    名           倪雅琼      （实验）	课程名称     数据库原理及应用  理论教师          文军         实验教师          何中海           电子科技大学教务处制表    电 子 科 技 大 学 实   验   报   告 学生姓名：倪雅琼		学号：2017221304023         指导教师：何中海  实验地点：信软楼西303     实验时间：2019.6.21 一、实验名称：图书销售管理系统数据库安全管理 二、实验学时：4 三、实验目的： 了解 DBMS 系统对数据库管理的内容与方法，特别是理解数据库安全机制和
 作用，以及 PostgreSQL 数据库角色管理、用户管理、权限管理的基本方法，培
 养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并
 完成上述角色与用户的权限管理。 四、实验原理： 1.设计数据存取权限控制模型，对各角色进行不同权限的赋予，保证数据库
 数据的安全性。
 2.使用 SQL 语句进行角色、用户的创建、对角色进行权限赋予、对用户分派
 角色。
 3.使用不同的用户登录时，就拥有了该用户的权限，在对数据库表进行操作
 的时候就会受到不同程度的制约。 五、实验内容
 使用 pgAdmin4 数据库管理工具对图书销售管理系统数据库进行数据库安全
 管理 五、实验内容： 1.针对图书销售管理系统数据库，设计数据存取权限控制模型。
 2.在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。
 3.在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色
 赋予数据库对象权限。 4.在数据库中，分别创建客户用户 U_Customer、商家用户 U_Seller。
 5.分别为客户用户 U_Customer、商家用户 U_Seller 分派客户（R_Client）、
 商家（R_Seller）角色。
 6.分别以客户用户 U_Customer、商家用户 U_Seller 身份访问图书销售管理
 数据库，验证所实现数据存取权限控制模型的正确性。
 在实验计算机上，利用 pgAdmin4 数据库管理工具及 SQL 语句，完成图书销
 售管理系统数据库安全管理，同时记录实验过程的步骤、操作、运行结果界面等
 数据，为撰写实验报告提供素材。 六、实验器材（设备、元器件）： “数据库原理及应用”实验所涉及的机房硬件设备为 pc 计算机、服务器以
 及网络环境，pc 计算机与服务器在同一局域网络。
 操作系统： Windows7 / Windows XP
 管理工具： pgAdmin4
 DBMS 系统： PostgreSQL 11
 七、实验步骤： 1.针对图书销售管理系统，在设计数据存取权限控制模型。
 2. 在 pgAdmin4 中 的 BookSale 数 据 库 中 ， 使 用 SQL 语 句 创 建 客 户
 （R_Customer）角色、商家（R_Seller）角色。
 3.在 pgAdmin4 中，根据第一步设计的数据存取权限控制模型对客户
 （R_Customer）角色、商家（R_Seller）角色赋予所定义的数据库对象权限。
 4.在 pgAdmin4 中，分别创建客户用户 U_Customer、商家用户 U_Seller，并
 为客户用户分配客户角色，为商家用户分配商家角色。
 5.分别以客户用户 U_Customer、商家用户 U_Seller 身份访问图书销售管理
 数据库，并分别以这两个用户对各数据库表进行操作，以验证是否正确分配了两
 用户不同的角色权限。 八、实验结果与分析（含重要数据结果分析或核心代码流程分析） 1.创建数据存取权限控制模型如下：  2.创建客户角色和商家角色 SQL: CREATE ROLE "R_Customer" WITH   LOGIN   NOSUPERUSER   NOCREATEDB   NOCREATEROLE   INHERIT   NOREPLICATION   CONNECTION LIMIT -1;   CREATE ROLE "R_Seller" WITH   LOGIN   NOSUPERUSER   NOCREATEDB   NOCREATEROLE   INHERIT   NOREPLICATION   CONNECTION LIMIT -1;  角色创建成功！ 3.赋予角色权限 SQL: GRANT SELECT,INSERT,UPDATE,DELETE ON SALE TO "R_Seller"; GRANT SELECT ON AUTHOR TO "R_Seller"; GRANT SELECT,INSERT,UPDATE,DELETE ON CUSTOMER TO "R_Seller"; GRANT SELECT ON PUBLISHER TO "R_Seller"; GRANT SELECT ON SALE TO "R_Seller"; GRANT SELECT,INSERT,UPDATE,DELETE ON STOCK TO "R_Seller";  GRANT SELECT ON AUTHOR TO "R_Customer"; GRANT SELECT ON BOOK TO "R_Customer"; GRANT SELECT ON CUSTOMER TO "R_Customer"; GRANT SELECT ON PUBLISHER TO "R_Customer"; GRANT SELECT ON SALE TO "R_Customer"; GRANT SELECT ON STOCK TO "R_Customer";  4.创建用户，并将赋予角色权限 SQL: CREATE USER "U_Customer"   LOGIN   INHERIT   IN ROLE "R_Customer";    CREATE USER "U_Seller"   LOGIN   INHERIT   IN ROLE "R_Seller";  5.验证权限 登录客户用户:  测试一：查看 book 表 SQL 语句：select * from book  客户用户可查看 book 表，权限正确。  测试二：删除 book 表中的数据 SQL 语句：delete from book where book_name = '最好的我们';  删除失败，客户用户不具有删除 book 表中数据的权限，权限正 确。
 测试三：查看 author 表 SQL 语句：select * from author 运行界面和结果展示如图:  结果分析：客户用户可查看 author 表，权限正确。  测试四：插入一条数据到 author 表中 SQL 语句：insert into author values('0005','哈哈','男','90','南京'); 客户用户插入一条新数据到 author 表  结果分析：客户用户无法在 author 表中插入数据，权限正确。  测试五：查看 sale 表 SQL 语句：select * from sale  结果分析：客户用户无查看销售表的权限，权限正确。五个测试均验证通过， 测试客户用户的权限正确。  登录商家用户  测试一：查看 customer SQL 语句：select * from customer  结果分析：商家用户具有查看客户表的权限，权限正确。  测试二：插入一条数据到 author 中 SQL 语句：insert into author values('0005','哈哈','男','90','南京');  商家用户查询插入一条新数据后的 author 表   结果分析：author 表中新增了如上插入的数据，商家用户具有插入 author 表 数据的权限，权限正确。  测试三：从 stock 表中删除一条数据 SQL 语句：delete from stock where stock_id = 'S001'    结果分析：商家用户不具有删除 stock 表数据的权限，权限正确。  测试四：更新 sale 表的一条数据 SQL 语句：UPDATE sale SET sale_date = '2019-05-21' WHERE sale_id = 'S001'   商家用户查看 sale 表数据  结果分析：sale 表中对应的数据被修改正确，商家用户具有修改 sale 数据的 权限，权限正确。  通过四个测试，每个测试结果都正确，说明商家用户权限赋予 正确。  删除失败，客户用户不具有删除 book 表中数据的权限，权限正 确。  九、总结及心得体会： 通过本次实验，我更加深入的理解了数据库角色创建和赋权，以及如何为用户赋予角色。在一定程度上保证了数据库安全。 十、对本实验过程及方法、手段的改进建议： 实验效果显著，收获颇丰，无需改进。 报告评分： 指导教师签字： 