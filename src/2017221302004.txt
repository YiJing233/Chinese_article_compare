
电 子 科 技 大 学 实   验   报   告  实验一：图书销售管理系统数据库设计 实验二：图书销售管理系统数据库创建与数据访问操作      实验三：图书销售管理系统数据库后端编程 二、实验室名称：信软楼303	           实验时间：  2019-6-14 三、实验目的 针对图书销售管理数据库开发，了解SQL语言DDL、DML、DQL类型语句在数据库操作访问中的应用方法，培养数据库SQL编程访问能力。同时也掌握基本的数据库触发器、存储过程SQL编程方法，培养数据库后端编程能力。本实验完成图书销售管理系统数据库的SQL数据操作访问和后端数据处理功能。 四、实验原理 1.首先对图书销售管理系统进行数据需求分析，定义组成系统数据结构的实体、实体属性以及实体之间的关系。通过建模设计工具完成系统概念数据模型设计。进一步对图书销售管理数据库进行物理模型设计，给出数据库设计方案。 2.基于数据库设计方案，通过 SQL 编程执行来完成对数据库的实现操作。在本实验中，使用 SQL 语句完成对数据库、关系表、索引、视图、触发器、存储过程的创建，并编写 SQL 语句对数据库表进行数据的增删查改操作，以及利用视图、存储过程、触发器实现业务数据处理。 五、实验内容 使用pgAdmin4数据库管理工具对图书销售管理系统数据库进行SQL编程操作，并完成触发器、存储过程后端编程，具体实验内容如下: 1.在数据库服务器中，执行SQL创建图书销售管理系统数据库BookSale。 2.在数据库BookSale中，执行SQL创建数据库表、视图、索引等对象。 3.在数据库BookSale中，执行SQL进行数据增、删、查、改访问操作。 4.在数据库BookSale中，采用PL/pgSQL语言编写存储过程函数Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 5.在数据库BookSale中，采用PL/pgSQL语言编写过程语句块，实现对存储过程函数Pro_CurrentSale的调用，并输出统计结果。 6.在数据库BookSale中，采用PL/pgSQL语言编写编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 7.在数据库BookSale中，对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。 8.在数据库BookSale中，创建存储过程函数实现图书销售数量和金额统计。 在实验计算机上，利用pgAdmin4数据库管理工具及SQL、PL/pgSQL语言，完成图书销售管理系统数据库应用编程操作，同时记录实验过程的步骤、操作、运行结果界面等数据，为撰写实验报告提供素材。 六、实验设备及环境 “数据库原理及应用”实验所涉及的机房硬件设备为pc计算机、服务器以及网络环境，pc计算机与服务器在同一局域网络。 操作系统： MAC OS 管理工具： pgAdmin4 DBMS系统： PostgreSQL 11 七、实验步骤 1. 在数据库服务器中，采用 SQL 语句执行方式，创建图书销售管理系统数据库 BookSale。 2.在 BookSale 数据库中，采用 SQL 语句执行方式，创建 book（图书表）、auther （作者表）、publisher（出版社表）、stock（库存流水表）、customer（客户表）、 sale（销售表），以及各表主键外键的创建，并为给表创建索引。 3.为 book、auther、publisher、customer 表准备样本数据，采用 SQL 语句执行方式，将样本数据插入到表中。采用 SQL 语句对 book、auther、publisher、 customer 表进行数据修改、删除、查询、统计等访问操作。 4.创建视图 BOOK_AUTHER_PUBLISHER，该视图查询数据库，输出图书名、作者、出版社以及图书价格等数据。对视图 Book_View 进行数据查询访问操作。 5.编写触发器函数，实现在 sale 表数据插入时，级联操作 stock 表，将图书的库存流水进行记录，同时级联更新 book 表中对应图书的库存数据。 6.创建完触发器函数之后，创建相对应的触发器，实现上一步中提到的功能。 7.测试触发器的功能，准备 sale 表的样本数据，并将其插入 sale 表，插入之后查看 stock 表是否有对应的更新，并对比插入 sale 数据前后 book 中对应数据的修改情况。 8.编写存储过程函数，实现统计某日图书的销售总量以及总金额数据。 9.调用存储过程函数，查看输出结果是否准确实现业务数据处理功能。 八、实验数据及结果分析 1.创建BookSaleLan数据库 实现思路与方法：使用SQL语句来进行数据库的创建。 SQL语句：create database “BookSaleLan” 运行操作界面如下图所示。  数据库操作结果面如下图所示：  结果分析：成功创建数据库。  2.创建数据库表以及表中外键和索引 实现思路与方法：首先明确图书销售管理系统的实体、实体属性以及各实体之间的联系，再通过 SQL 语句对表进行创建，表对应实体，实体属性对应表中的列，通过主外键来将表联系起来。 SQL语句： create table Auther_2017221302004( 	AU_ID		char(18)		not null, 	AU_Name		varchar(20)		not null, 	AU_Gender 	char(2)			not null, 	AU_Phone 	varchar(11) 	not null, 	AU_Address	varchar(50)		not null, 	constraint	PK_AUTHER primary key (AU_ID) );  create table Book_2017221302004 ( 	Book_ISBN	char(13)		not null, 	AU_ID		char(18)		null, 	PUB_ID		char(11)		null, 	Book_Name	varchar(50)		not null, 	Book_Pubdate	date		not null, 	Book_Price 	money 			not null, 	Book_Category varchar(20) 	not null, 	Book_Stock 	int4 			not null, 	Book_Notes 	varchar(100) 	null, 	Book_List 	varchar(100) 	null, 	constraint PK_BOOK primary key (Book_ISBN) );  create table CUSTOMER_2017221302004 ( 	CUST_ID 		char(18) 		not null, 	CUST_Name 		varchar(20) 	not null, 	CUST_Phone 		varchar(15) 	not null, 	CUST_Address	varchar(50) 	not null, 	CUST_Email 		varchar(50)		not null, 	constraint PK_CUSTOMER 		primary key (CUST_ID) );  create table Publisher_2017221302004 ( 	PUB_ID 		char(11) 	not null, 	PUB_Name 	varchar(20) not null, 	PUB_Phone 	varchar(15) not null, 	PUB_Address varchar(50) not null, 	constraint PK_PUBLISHER primary key (PUB_ID) );  create table Sale_2017221302004 ( 	SALE_ID 	varchar(11) not null, 	Book_ISBN 	char(13) 	null, 	CUST_ID 	char(18) 	null, 	SALE_Date 	date 		not null, 	SALE_QTY 	int4 		not null, 	SALE_Amount money 		not null, 	constraint PK_SALE primary key (SALE_ID) );  create table Stock_2017221302004 ( 	Stock_ID 		varchar(10) not null, 	Book_ISBN 		char(13) 	null, 	Stock_Change 	int4 		not null, 	Stock_Operation char(4) 	not null, 	Stock_Datetime 	date 		not null, 	constraint PK_STOCK primary key (Stock_ID) );  alter table Book_2017221302004 	add constraint FK_BOOK_BOOK_AUTH_AUTHER foreign key (AU_ID) 		references Auther_2017221302004 (AU_ID) 		on delete restrict on update restrict; 		 alter table Book_2017221302004 	add constraint FK_BOOK_BOOK_PUBL_PUBLISHE foreign key (PUB_ID) 		references Publisher_2017221302004 (PUB_ID) 		on delete restrict on update restrict; 		 alter table Sale_2017221302004 	add constraint FK_SALE_BOOK_SALE_BOOK foreign key (Book_ISBN) 		references Book_2017221302004 (Book_ISBN) 		on delete restrict on update restrict; 		 alter table Sale_2017221302004 	add constraint FK_SALE_CUSTOMER_CUSTOMER foreign key (CUST_ID) 		references CUSTOMER_2017221302004 (CUST_ID) 		on delete restrict on update restrict; 		 alter table Stock_2017221302004 	add constraint FK_STOCK_BOOK_STOC_BOOK foreign key (Book_ISBN) 		references Book_2017221302004 (Book_ISBN) 		on delete restrict on update restrict;  将上面的SQL 程序，提交到数据库服务器执行，其执行作界面如图所示。    当SQL 程序成功执行后，可以在数据库看到新添加的数据库表对象，如图 ：    3.插入样本数据并对auther_2017221302004表进行增删查改操作 实现思路与方法：首先准备样本数据，尽可能使得数据符合实际应用并且要能满足后续的数据处理操作。这里以auther_2017221302004 表为例，给出该表的数据增、删、查、改SQL 语句操作访问。 1）执行SQL 语句，插入样本数据到图书销售数据库 insert into auther_2017221302004 values('450702199812239003','彭业鉴','男','18877709336','四川省成都市成华区建设北路二段十号'); insert into auther_2017221302004 values('540135199103281548','叶无双','男','15812387538','浙江省杭州市天路区梅田路二十八号'); insert into auther_2017221302004 values('120857198811123587','李婷','女','18575615472','北京市朝阳区梅山路二巷八号'); insert into auther_2017221302004 values('330309198504150527','王天','男','13554874593','四川省成都市成华区建设北路二段十号'); insert into publisher_2017221302004 values('PUB00000000','彭业鉴教育出版社','010-65432123','北京'); insert into publisher_2017221302004 values('PUB00000001','高等教育出版社','010-65321854','北京'); insert into publisher_2017221302004 values('PUB00000002','电子工业出版社','010-65329857','北京'); insert into publisher_2017221302004 values('PUB00000003','人民邮电出版社','010-65325987','北京'); insert into book_2017221302004 values('2017221302004','450702199812239003','PUB00000000','彭业鉴的数据库实验书','2019-6-10','60','IT 技术','300'); insert into book_2017221302004 values('9787115502742','330309198504150527','PUB00000001','Web 前端开发最佳实践','2016-01-01','59','IT 技术','100'); insert into book_2017221302004 values('9875325415577','540135199103281548','PUB00000002','Java EE Web 编程','2008-01-01','52','IT 技术','200'); insert into book_2017221302004 values('9865365975234','120857198811123587','PUB00000003',' 数据库实验指导','2013-08-1','29','IT 技术','150');  insert into customer_2017221302004 values('450702199901018114','业鉴','18844408336','广西省钦州市尖山镇九鸦村','1163668040@qq.com'); Insert into customer_2017221302004 values('680554199207120325','林天','15963512578','四川省成都市成华区建设北路二段十一号','450448745@qq.com'); Insert into customer_2017221302004 values('345021198608120258','宫铃','18636598574','浙江省杭州市天路区梅田路二十九号','657873215@qq.com'); Insert into customer_2017221302004 values('542244197812121687','鲁丽','13615869875','北京市朝阳区梅山路二巷十六号','647864378@qq.com'); 样本数据插入SQL 程序的运行操作界面如图所示。   查看auther_2017221302004表数据语句如下： select * from auther_2017221302004; 运行该SQL 语句，其执行结果如图所示。  结果分析：插入表数据成功无误。  2）增加一条数据到auther_2017221302004表 SQL 语句： insert into auther_2017221302004 values('250801199812238117','彭彭彭','男','27396227447','四川省成都市电子科技大学'); 运行操作界面如图所示：  执行结果如图所示：   3）删除一条publisher 表数据 SQL语句：delete from auther_2017221302004 where au_phone='27396227447'; 运行操作结果如图：  其执行及如果如图所示：   4）修改一条auther_2017221302004表数据 SQL语句：update auther_2017221302004 set au_phone='17396227337' where au_name='彭业鉴'; 该语句运行操作结果如图所示：  再对auther_2017221302004表进行查询：  结果分析：对应au_phone数据确实成功被修改。  4.创建视图 实现思路与方法：创建一个视图将多个表关联查询，通过视图实现简单的数据查询。创建完视图之后可用select 语句来查看视图，用法：select * from 视图名。例如，创建视图BOOK_AUTHER_PUBLISHER 实现图书信息查询，其SQL 语句如下： create view BOOK_AUTHER_PUBLISHER as  select B.book_name as "图书",AU.au_name as "作者",PU.pub_name as "出版社",B.book_price as "图书价格" from book_2017221302004 as B join auther_2017221302004 as AU on B.au_id=AU.au_id join publisher_2017221302004 as PU on B.pub_id = PU.pub_id 	该SQL 运行操作结果如图所示：  采用如下SQL 语句实现视图数据查询：select * from BOOK_AUTHER_PUBLISHER; 该SQL 语句执行结果如图所示。  结果分析：视图展示数据对应正确且按需展示，视图创建成功。  5.创建触发器函数 实现思路与方法：创建触发器函数实现在有一条销售数据插入sale 表时，同时在库存表stock 中插入图书的库存变化记录，并修改对应图书表book 的库存数，为后续的创建触发器提供函数方法。 创建触发器函数SQL 语句 create or replace function insertsale() returns trigger as $$ 	begin 		if (TG_OP = 'insert') then 			insert into stock values(new.sale_id,new.book_isbn,new.sale_qty,'出库',new.sale_date); 			update book_2017221302004 set  book_2017221302004.book_stock=book_2017221302004.book_stock-new.sale_qty  where book_2017221302004.book_isbn = new.book_isbn; 			return new; 		end if; 		return null; 	end; $$ language plpgsql; 运行操作结果如图所示   6.创建触发器 实现思路与方法：创建触发器，关联销售表，在销售表插入一个新数据之后，执行上一步编写的触发器函数。 创建触发器SQL 语句： create trigger tri_insertsale after insert on sale_2017221302004 for each row execute procedure InsertSale(); 运行操作界面如图：   7.测试触发器 实现思路与方法：在销售表中插入几个样本数据，之后再查看库存表和图书表的数据，观察这两个表中的数据是否发生变化，并且观察数据的变化是否与插入销售表的数据一致。 测试触发器SQL 语句： Insert into sale_2017221302004 values('SA00001','9787115502742','680554199207120325','2019-05-20',15,'885'); Insert into sale_2017221302004 values('SA00002','9875325415577','345021198608120258','2019-05-20',20,'1040'); Insert into sale_2017221302004 values('SA00003','9865365975234','542244197812121687','2019-05-20',50,'1450'); 运行操作界面如图：  结果展示，查看stock_2017221302004 表数据以及对比book_2017221302004 表数据。    结果分析： Stock 表本来没有数据，在sale 插入数据之后，并未能将库存数据进行记录，记录数据正确，但却同时更新了book 表中各对应图书的库存量，更新数据正确，触发器功能实现出现了错误。  8.创建存储过程 实现思路与方法：通过存储过程实现某日图书销售数量和金额统计。创建存储过程的SQL 语句如下。 create or replace function countsale(OUT amount int,OUT allmoney money) as $count$ begin 	select sum(sale_qty) into amount from sale_2017221302004 where sale_date = '2019-05-20'; 	select sum(sale_amount) into allmoney from sale_2017221302004 where sale_date='2019-05-20'; end; $count$ language plpgsql; 该SQL 语句运行操作界面如图所示。  9.调用存储过程 实现思路与方法：调用上一步的存储过程，观察输出的结果是否与真实情况一致，调用存储过程SQL 语句如下： select *from countsale() 存储过程调用语句执行结果如图所示。  结果分析：调用存储过程输出的总销售量和总金额数据正确，存储过程功能正确。 九、总结及心得体会 	本次实验主要是对数据库进行创建，表的创建，数据的插入和增删查改，触发器的创建以及存储过程的创建。书上的内容较为理论化，要进行动手操作。就比如说，在postgresql中的关键字其实是部分大小写的，但是单引号里边的内容却要分大小写，如果不注意将TG_OP = ‘INSERT’写成TG_OP = ‘insert’,那么不能得到想要的结果。 
 电 子 科 技 大 学 实   验   报   告  一、实验二：图书销售管理系统数据库系统管理 二、实验室名称：信软楼303				          实验时间：2019-6-14 三、实验目的 了解该DBMS系统对数据库管理的内容与方法，特别是理解数据库安全机制和作用，以及PostgreSQL数据库角色管理、用户管理、权限管理的基本方法，培养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并完成上述角色与用户的权限管理。 四、实验原理 1.设计数据存取权限控制模型，对各角色进行不同权限的赋予，保证数据库数据的安全性。 2.使用SQL 语句进行角色、用户的创建、对角色进行权限赋予、对用户分派角色。 3.使用不同的用户登录时，就拥有了该用户的权限，在对数据库表进行操作的时候就会受到不同程度的制约。 五、实验内容 使用pgAdmin4数据库管理工具对图书销售管理系统数据库进行数据库安全管理，具体实验内容如下: 1.针对图书销售管理系统数据库，设计数据存取权限控制模型。 2.在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 3.在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 4.在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 5.分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 6.分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 在实验计算机上，利用pgAdmin4数据库管理工具及SQL语句，完成图书销售管理系统数据库安全管理，同时记录实验过程的步骤、操作、运行结果界面等数据，为撰写实验报告提供素材。       六、实验设备及环境 “数据库原理及应用”实验所涉及的机房硬件设备为pc计算机、服务器以及网络环境，pc计算机与服务器在同一局域网络。 操作系统： MAC OS 管理工具： pgAdmin4 DBMS系统： PostgreSQL 11 七、实验步骤 1.针对图书销售管理系统，在设计数据存取权限控制模型。 2. 在pgAdmin4 中的BookSale 数据库中， 使用SQL 语句创建客户（R_Customer）角色、商家（R_Seller）角色。 3.在pgAdmin4 中， 根据第一步设计的数据存取权限控制模型对客户（R_Customer）角色、商家（R_Seller）角色赋予所定义的数据库对象权限。 4.在pgAdmin4 中，分别创建客户用户U_Customer、商家用户U_Seller，并为客户用户分配客户角色，为商家用户分配商家角色。 5.分别以客户用户U_Customer、商家用户U_Seller 身份访问图书销售管理数据库，并分别以这两个用户对各数据库表进行操作，以验证是否正确分配了两 用户不同的角色权限。 八、实验数据及结果分析 1.创建客户角色和商家角色 实现思路与方法：使用SQL 语句进行角色创建，因为客户角色和商家角色都是普通角色，因此除了登录的功能之外其他的高级权限都为no。 创建客户角色的SQL 语句： create role "R_Customer_2017221302004"	with LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOREPLICATION NOINHERIT CONNECTION LIMIT -1 创建客户角色的SQL运行界面如图所示：  创建商家角色的SQL语句： create role "R_Seller_2017221302004"	with LOGIN NOSUPERUSER NOCREATEDB NOCREATEROLE NOREPLICATION NOINHERIT CONNECTION LIMIT -1 创建商家角色的运行界面如图所示：  创建两个角色的结果如图所示：  结果分析：在角色用户表中看到刚创建的两个角色，角色创建成功。  2.赋予客户、商家角色权限 实现思路与方法：使用SQL 语句给两个角色赋予在步骤1 定义的权限。 赋予客户角色SQL 语句： grant select on book_2017221302004 to "R_Customer_2017221302004"; grant select on auther_2017221302004 to "R_Customer_2017221302004"; grant select on publisher_2017221302004 to "R_Customer_2017221302004"; 运行界面如图所示：  赋予商家角色SQL语句： grant select,insert,update,delete on book_2017221302004 to "R_Seller_2017221302004"; grant select,insert,update,delete on auther_2017221302004 to "R_Seller_2017221302004"; grant select,insert,update,delete on publisher_2017221302004 to "R_Seller_2017221302004"; grant select on stock_2017221302004 to "R_Seller_2017221302004"; grant select ,insert,update,delete on sale_2017221302004 to "R_Seller_2017221302004"; grant select,insert,update,delete on customer_2017221302004 to "R_Seller_2017221302004"; 运行界面如图所示：   结果分析：权限赋予成功。  4.创建客户用户和商家用户，并将客户角色和商家角色赋予他们 实现思路与方法：使用SQL 语句创建用户，并将对应的角色赋予他们。 其SQL语句如下： create user "U_Customer_2017221302004" with login connection limit -1 in role "R_Customer_2017221302004" password '304009';  create user "U_Seller_2017221302004" with login connection limit -1 in role "R_Seller_2017221302004" password '304009'; 其运行界面如下：  运行结果如下：  5. 分别用客户用户和商家用户登录数据库，并进行操作来验证是否赋予权限成功。 实现思路与方法：用客户用户和商家用户进行登录，通过对各表进行增删查改操作来观察操作结果来验证是否与赋予他们的权限一致。 首先我们来登录客户用户来进行测试。 登陆用户客户如图所示：  测试一：查看book_2017221302004表 SQL语句：select * from book_2017221302004; 运行界面结果：  	结果分析：成功输出。 	测试二：删除book_2017221302004表中的数据 运行结果如图所示：  结果分析：删除失败，客户用户不具有删除权限，权限正确。 测试三：查看auther_2017221302004表 运行结果如图所示：  结果分析：客户可以查看该表，权限正确。 测试四：插入一条数据到该表中 运行结果如图所示：  结果分析：客户无法插入数据，权限正确。 测试五：查看sale_2017221302004表 运行结果如图所示：  结果分析：客户用户无查看销售表的权限，权限正确。五个测试均验证通过，测试客户用户的权限正确。  登陆商家用户进行测试  测试一：查看Customer表 运行结果如图所示：  结果分析：商家用户具有查看客户表的权限，权限正确。  测试二：插入一条数据到auther_2017221302004 中 运行结果如图所示：  查看该表：  结果分析：auther_2017221302004 表中新增了如上插入的数据，商家用户具有插入auther_2017221302004 表数据的权限，权限正确。 	 测试三：从stock_2017221302004表中删除数据 	运行结果如图所示：  结果分析：商家用户不具有删除stock_2017221302004 表数据的权限，权限正确。 测试四：更新sale_2017221302004表的一条数据 运行结果如图所示：  结果展示，通过查看sale_2017221302004 来查看,结果如图所示。  结果分析：sale_2017221302004表中对应的数据被修改正确，商家用户具有修改sale_2017221302004数据的权限，权限正确。通过四个测试，每个测试结果都正确，说明商家用户权限赋予正确。 九、总结及心得体会 本次实验主要是对数据库进行角色管理，一般来说需要经过一下几个步骤：首先是创建角色，然后赋予角色对数据库表的操作权限，最后再创建用户，并且赋予相应的角色。