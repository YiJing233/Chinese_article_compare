
电 子 科 技 大 学 实   验   报   告  一、实验一：图书销售管理系统数据库SQL应用编程 二、实验室名称：信软楼304          实验时间：2019.06.14      三、实验目的 针对图书销售管理数据库开发，了解SQL语言DDL、DML、DQL类型语句在数据库操作访问中的应用方法，培养数据库SQL编程访问能力。同时也掌握基本的数据库触发器、存储过程SQL编程方法，培养数据库后端编程能力。本实验完成图书销售管理系统数据库的SQL数据操作访问和后端数据处理功能。 四、实验原理 在pgadmin4工具编写SQL语句 数据库基本操作数据 Create database dbname 创建数据库 Create table tbname 创建数据表 Insert into tbname values(v1,v2,v3,….) 插入数据 Delete from tbname where v1 = ‘条件’ 删除目标记录 Update tbname set v2 = ‘xx’,v3=’xx’where v1= ‘条件’实现表数据更新 Alter table <tbname> add <新列名称><数据类型>[完整性约束]      视图视图是一种从基础数据库表中获取数据所组成的虚拟表，在数据库中只需储 视图结构定义，而不存储视图所包含的数据，使用视图可以简化复杂的SQL查询，提高数据访问安全性，提供一定的数据逻辑独立性，可以集中展示用户所感兴趣的特定数据。  2.1视图创建      Create view viewname as      Select xx,xx,xx      From tb1,tb2,tb3…      Where 条件连接            2.2视图查看      Select * from viewname;            3. 存储过程是由一组能完成特定功能的SQL语句构成，它把经常会反复使用的SQL语句逻辑块封装起来，经编译后，存储在数据库服务端，当再次调用时，不需再次编译，用户连接到数据库服务端时，用户通过指定存储过程的名称并给出参数，数据库就可以找到相应的存储过程并予以调用。  3.1存储过程的创建 Create [or replace] function ([[argmode][argname]argtype[{default|=} [returns retype | returns table(column_name column_type[,…])] As $$ Declare    --声明段 Begin    --函数体语句 End； $$ language lang_name;  3.2存储过程的调用 Select function_name;      4触发器与存储过程不同，存储过程通过其他程序启动运行或直接启动运行，而触发器由一个事件触发启动运行，也就是触发器在某个事件发生时自动隐式运行。Postgresql 触发器在系统执行某种特定类型的操作时，数据库将自动执行指定的特殊函数。触发器常用于定义逻辑计较复杂的完整性约束，或某种业务规则的约束  4.1 触发器的创建    Create [constraint] Trigger name {before | after |instead of}{event[or]} On table_name [from referenced_table_name] [for[each]{row|statement}]      [when (condition)]      Execute procedure function_name(arguments)       五、实验内容 使用pgAdmin4数据库管理工具对图书销售管理系统数据库进行SQL编程操作，并完成触发器、存储过程后端编程，具体实验内容如下: （1）图书销售管理系统数据库BookSale创建操作 （2）在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 （3）对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 （4）编写存储过程Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 （5）编写过程语句块，实现对存储过程Pro_CurrentSale的调用，并输出统计结果。 （6）编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 （7）对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。 在实验计算机上，利用pgAdmin4数据库管理工具及SQL语句，完成图书销售管理系统数据库SQL应用编程操作，同时记录实验过程的步骤、操作、运行结果界面等数据，为撰写实验报告提供素材。 六、实验设备及环境 “数据库原理及应用”实验所涉及的机房硬件设备为pc计算机、服务器以及网络环境，pc计算机与服务器在同一局域网络。 操作系统： Windows7 / Windows XP 管理工具： pgAdmin4 DBMS系统： PostgreSQL 11 七、实验步骤   1. 创建数据库BookSale   2. 根据业务逻辑，参考书上例题图书销售系统创建数据库表    Author（作者信息表）    Publisher（出版社信息表）    Bookinfo（图书信息表）    Booksell（销售表）    Bookstore（图书库存表）    Bookclass（图书类别表）  3.用SQL语句insert，delete,select,alter,实现对数据库表的增、删、查、改    4. 创建存储过程Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。      用select function_name()实现调用存储过程。      5. 编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理      6.向bookstore表中插入数据检验触发器的正确性。 八、实验数据及结果分析  1.create database BookSale; 结果：图1-1  2. 1 创建数据库表 create table author( authorid char(12) primary key, authorname varchar(30) not null, address varchar(30), authortel char(11) ); create table publisher( pubid char(12) primary key, pubname varchar(40) not null, pubtel varchar(20) not null, pubaddress varchar(60)      create table bookclass( classid char(5) primary key, classname varchar(20) not null ); create table bookinfo( bookid char(22) primary key, pubid char(12) not null, classid char(5) not null, bookname varchar(80) not null, pubdate date not null, price money not null, brefinfo varchar(2000), authorid char(12) not null, constraint pubid_fk foreign key(pubid) references publisher(pubid) on delete cascade, constraint classid_fk foreign key(classid) references bookclass(classid) on delete cascade, constraint authorid_fk foreign key(authorid) references author(authorid) on delete cascade ); create table bookstore( bookid char(22) primary key, storenum int not null, constraint bookid_fk foreign key(bookid) references  bookinfo(bookid) on delete cascade ); create table booksell( serialnum serial primary key, bookid char(22) not null, selldate date not null, sellnum int not null, amount money not null, constraint bookid_fk foreign key(bookid) references bookinfo(bookid) on delete cascade )  结果：  2.2 创建视图、索引 索引创建于数据量较大，并且查询次数较高的表中，因此选择bookinfo表和author 表 create view bookinfoview as  select bf.bookname as 书名, a.authorname as 作者名, bf.price as 价格, bc.classname as 类别, p.pubname as 出版社名称, bf.pubdate as 出版日期, bs.storenum as 库存量,bf.brefinfo as 简介 from bookinfo as bf, author as a, publisher as p, bookstore as bs, bookclass as bc where bf.authorid = a.authorid and bf.pubid = p.pubid and bf.bookid = bs.bookid and bf.classid = bc.classid;  create index bookid_idx on bookinfo(booid); create index authorid_idx on author(authorid); 结果：  增、删、查、改SQL操作 insert into author values('000000000001','李四','中国四川省成都市','12345678912'); insert into author values('000000000002','张三','中国四川省绵阳市','12345678923'); insert into author values('000000000003','王二麻子','中国四川省宜宾市','12345678934'); insert into publisher values('000000000001','电子工业出版社','66666666','中国河北省A市'); insert into publisher values('000000000002','石油工业出版社','88888888','中国东北省A市'); insert into publisher values('000000000003','清华大学出版社','11111111','中国四川省成都市'); insert into bookclass values('00001','自然'); insert into bookclass values('00002','科学'); insert into bookclass values('00003','人文'); insert into bookclass values('00004','古诗词'); insert into bookclass values('00005','散文');      insert into bookinfo values('1','000000000001','00001','张三的生物进化论','2017-05-01',30,'暂无','000000000002'); insert into bookinfo values('2','000000000002','00005','李四的精选散文集','2017-03-02',50,'值得拥有','000000000002'); insert into bookinfo values('3','000000000003','00004','洞主的优美诗集','2018-01-02',100,'现代诗集','000000000003'); insert into bookinfo values('4','000000000002','00002','老王的6级应试技巧','2019-05-06',388,'来自超级大佬的指导','000000000002'); insert into bookinfo values('5','000000000001','00001','生物进化论','2017-08-01',30,'暂无','000000000002'); insert into bookinfo values('6','000000000002','00002','张三的自然与科学','2017-05-01',100,'暂无','000000000002'); insert into bookinfo values('7','000000000003','00004','张三精选','2018-05-01',30,'暂无','000000000002'); insert into bookinfo values('8','000000000001','00001','张三的初级生物教材','2019-05-01',30,'暂无','000000000002'); insert into bookinfo values('9','000000000001','00001','张三的高级生物教材','2017-05-01',99,'暂无','000000000002');  insert into bookstore values('1',100); insert into bookstore values('2',0); insert into bookstore values('3',1000); insert into bookstore values('4',988); insert into booksell (bookid,selldate,sellnum,amount)values('1','2019-05-07',10,300); insert into booksell (bookid,selldate,sellnum,amount)values('1','2019-05-08',7,210); insert into booksell (bookid,selldate,sellnum,amount)values('2','2019-05-07',3,150); insert into booksell (bookid,selldate,sellnum,amount)values('4','2019-04-01',10,3880); insert into booksell (bookid,selldate,sellnum,amount)values('4','2019-04-02',5,1940); insert into booksell (bookid,selldate,sellnum,amount)values('4','2019-05-10',20,7760); insert into booksell (bookid,selldate,sellnum,amount)values('4','2019-06-12',20,7760); insert into booksell (bookid,selldate,sellnum,amount)values('3','2019-06-12',20,2000); insert into booksell (bookid,selldate,sellnum,amount)values('1','2019-05-10',10,300); 结果：  3.1删除bookclass 表中classname 为人文的一项，并查看结果  delete from bookclass where classname = '人文'; select * from bookclass;   4 . 编写存储过程Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 create or replace function Pro_CurrentSale() returns table(booknum int, amount money) as $$ begin  return QUERY select cast(sum(sellnum)as int), cast(sum(booksell.amount)as money)  from booksell  where booksell.selldate = current_date; end; $$ language plpgsql; select pro_currentsale(); 结果：  编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。
create table bookstore_tri_tb( username varchar(20), bookid char(22), updatetime date, oldstorenum int, newstorenum int,   create or replace function Tri_InsertSale() returns trigger as $$ begin insert into bookstore_tri_tb select user,new.bookid,now(),old.storenum,new.storenum; return new; end; $$ language plpgsql;  insert into bookstore values('9',100); insert into bookstore values('6',500); insert into bookstore values('7',980); insert into bookstore values('8',133);  create trigger bookstore_tri after insert on bookstore for each row execute procedure Tri_InsertSale(); 结果：     九、总结及心得体会   
 电 子 科 技 大 学 实   验   报   告  一、实验二：图书销售管理系统数据库安全管理 二、实验室名称：信软楼304  		   实验时间：2019.06.21    三、实验目的 了解该DBMS系统对数据库管理的内容与方法，特别是理解数据库安全机制和作用，以及PostgreSQL数据库角色管理、用户管理、权限管理的基本方法，培养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并完成上述角色与用户的权限管理。 四、实验原理 安全性时任何系统都必须解决的关键技术问题，特别是数据库存储了组织机构最重要的信息数据，如财务数据、交易数据、经营数据等，数据库系统的安全至关重要，实施数据库安全管理是十分重要的工作，而对数据库用户创建及权限分配是数据库维护安全的重要的一面。 用户的创建 SQL提供了专门创建用户的SQL命令语句，在数据库中，只能通过特定权限的用户创建其他用户，如系统管理员或超级用户。因此为每个用户分配合适的权限，尤为重要。创建用户的SQL语句基本格式为 Create user <用户账号>[[with] option […]]; Superuser|nosuperuser: 指定创建的用户是否为超级用户 Createdb | nocreatedb 指定创建的用户是否具有创建数据库的权限 Createrole | nocreaterole 指定创建的用户是否具有创建角色的权限 Inherit | noinherit 指定创建的用户是否具有继承角色的权限 Login | nologin 指定创建的用户是否具有登陆权限 Replication | noreplication 指定创建的用户是否具有复制权限 Bypassrls | nobypassrls 指定创建的用户是否具有绕过安全策略的权限 Connection limit 指定创建的用户访问数据连接的数目限制 [encrypted | unencrypted] password ‘xxx’指定创建的用户密码是否需要加密 Valid until ‘timestamp’ 指定创建的用户密码失效时间 In role role_name[,…]指定创建的用户成为那些角色的成员     角色的创建 角色的创建与用户创建过程相似，但没有密码等设置要求。       权限赋予 可以直接将对表的操作权限直接赋予用户，如 Grant select,update,alter,delete on table_name to userxx; 但是这样需要为每个用户单独赋予权限，当用户数量较多时，工作量大，且难以管理。 通过创建角色，赋予角色相应权限，用户采用继承角色的方式获得相应的权限 五、实验内容 使用pgAdmin4数据库管理工具对图书销售管理系统数据库进行数据库安全管理，具体实验内容如下: （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。 （2）在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 （3）在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 （4）在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 （5）分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 在实验计算机上，利用pgAdmin4数据库管理工具及SQL语句，完成图书销售管理系统数据库安全管理，同时记录实验过程的步骤、操作、运行结果界面等数据，为撰写实验报告提供素材。 六、实验设备及环境 “数据库原理及应用”实验所涉及的机房硬件设备为pc计算机、服务器以及网络环境，pc计算机与服务器在同一局域网络。 操作系统： Windows7 / Windows XP 管理工具： pgAdmin4 DBMS系统： PostgreSQL 11 七、实验步骤   1.  根据业务逻辑及实际需求为商家、客户、系统管理员分配在每个数据库表上的操作权限。   2.  利用SQL语句创建客户R_Customer 及商家R_Seller 角色。   3.  利用SQL语句grant 为客户R_Customer、商家R_Seller角色参考数据存取权限模型赋予相应权限。  4.   利用SQL语句创建U_Customer、商家用户U_Seller。  5.   分别登陆客户用户及商家用户，检查权限设置正确性。 八、 实验数据及结果分析 1. 针对图书销售管理系统数据库，设计数据存取权限控制模型 商家角色应该具有对所有表的增、删、改、更新的操作，客户角色对作者信息表、出版社信息表、图书信息表、图书分类表的读取权限，但是对于图书销售表及图书库存量应予以屏蔽，但可以将bookinfoview视图读取权限赋予用户，使其可以查看目标图书的库存量 2. 在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 create role "R_Customer" with login nosuperuser nocreatedb nocreaterole inherit noreplication connection limit -1;  create role "R_Seller" with login nosuperuser nocreatedb nocreaterole inherit noreplication connection limit -1;   3.   在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据 库对象权限。 grant select on author to "R_Customer"; grant select on publisher to "R_Customer"; grant select on bookinfo to "R_Customer"; grant select on bookclass to "R_Customer"; grant select on bookinfoview to "R_Customer"; grant select,insert,update,delete on author to "R_Seller"; grant select,insert,update,delete on publisher to "R_Seller"; grant select,insert,update,delete on bookinfo to "R_Seller"; grant select,insert,update,delete on booksell to "R_Seller"; grant select,insert,update,delete on bookstore to "R_Seller"; grant select,insert,update,delete on bookclass to "R_Seller";    4. 在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 create user "U_Customer" with login nosuperuser nocreatedb nocreaterole inherit noreplication connection limit -1 in role "R_Customer" password 'customer1';    create user "U_Seller" with login nosuperuser nocreatedb nocreaterole inherit noreplication connection limit -1 in role "R_Seller" password 'seller1';  5.分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性  5.1 客户对数据库表只有读取权限，可以读取信息成功，但施加其他操作便会报错               客户不具有对bookseller表的读取权限        总结及心得体会    熟悉了sql语言、数据库管理和对postgre数据库的使用。 