电子科技大学信息与软件工程学院    实 验 报 告    学    号     2017221303006     姓    名        董佳宇         （实验）	课程名称    数据库原理及应用   理论教师         文军          实验教师        何中海             电子科技大学教务处制表    电 子 科 技 大 学 实   验   报   告 学生姓名：董佳宇		学号：2017221303006   指导教师：何中海   实验地点：信软楼303     实验时间：2019.6.14 一、实验名称：图书销售管理系统数据库SQL应用编程 二、实验学时：5 三、实验目的： 针对图书借阅管理数据库开发，掌握DDL、DML、DQL类型SQL语句在数据库操作访问中的应用方法，培养数据库SQL应用编程能力。同时也掌握基本的数据库触发器、存储过程编程方法，培养数据库后端编程能力。本实验还需要培养数据库SQL应用编程的复杂工程问题解决能力。 四、实验原理： 	SQL相关语句。 五、实验内容： （1）图书销售管理系统数据库BookSale创建操作 （2）在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 （3）对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 （4）编写函数Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 （5）编写过程语句块，实现对函数Pro_CurrentSale的调用，并输出统计结果。 （6）编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 （7）对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。 六、实验器材（设备、元器件）： 装有Postgre11环境的WINDOWS PC机一台。 七、实验步骤： 	先建立数据库，然后分析数据库中的表种类，建立相应的表，执行增删改查的操作，然后编写并调用函数Pro_CurrentSale，最后编写触发器以及触发器对应的存储过程。 八、实验结果与分析（含重要数据结果分析或核心代码流程分析） 1.建立一个BookSale数据库： CREATE DATABASE BookSale; 2. 在图书销售管理系统数据库BookSale中创建数据库表，视图以及索引： 首先，经过分析，这个系统需要建立十个表：分别为：地区表Locationtable，作者表AuthorTable，图书类别表BookKindTable，出版社表PublisherTable，商店表ShopTable，折扣表DiscountTable，图书表BookTable，销售表SaleTable，库存表StoreTable，编著排名表WriterRankTable 以下是建立上述十个表的语句： CREATE TABLE LocationTable ( LocationID		char(22)	PRIMARY KEY, Locationname	varchar(20)	NOT NULL );  CREATE TABLE AuthorTable ( AuthorID		char(12)	PRIMARY KEY, LocationID		char(22)	NOT NULL, AuthorName		varchar(40)	NOT NULL, AuthorLocation	varchar(80)	NOT NULL, AuthorPhone		char(11)	NOT NULL, CONSTRAINT	LocationID_FK FOREIGN KEY(LocationID) REFERENCES LocationTable(LocationID) 	ON DELETE CASCADE 	ON UPDATE CASCADE );   CREATE TABLE BookKindTable ( KindID		char(5)		PRIMARY KEY, KindName	varchar(20)	NOT NULL );  CREATE TABLE PublisherTable ( PublisherID		char(12)	PRIMARY KEY, PublisherName	varchar(40)	NOT NULL, PublisherPhone	varchar(20)	NOT NULL, PublisherLocation	varchar(60)	NOT NULL );  CREATE TABLE ShopTable ( ShopID		char(12)	PRIMARY KEY, ShopName	varchar(40)	NOT NULL, PostID		char(5)		NOT NULL, ShopLocation	varchar(80)	NOT NULL );  CREATE TABLE DiscountTable ( DiscountID	int2		PRIMARY KEY, ShopID		char(12)	NOT NULL, DiscountPercent	int2	NOT NULL, DiscountKind	varchar(20)	NOT NULL, CONSTRAINT	ShopID_FK FOREIGN KEY(ShopID) REFERENCES ShopTable(ShopID) 	ON DELETE CASCADE 	ON UPDATE CASCADE );  CREATE TABLE BookTable ( ISBN	char(22)	PRIMARY KEY, PublisherID	char(12)	NOT NULL, KindID		char(5)		NOT NULL, BookName	varchar(80)	NOT NULL, PublishDate	Date		NOT NULL, BookPrice	Money		NOT NULL, Bookindex	varchar(2000)	NOT NULL, BookCatalogue	Text	NOT NULL, CONSTRAINT	PublisherID_FK FOREIGN KEY(PublisherID) REFERENCES PublisherTable(PublisherID) 	ON DELETE CASCADE 	ON UPDATE CASCADE, CONSTRAINT	KindID_FK FOREIGN KEY(KindID) REFERENCES BookKindTable(KindID) 	ON DELETE CASCADE 	ON UPDATE CASCADE );  CREATE TABLE SaleTable ( SaleID	Serial	PRIMARY KEY, ISBN	char(22)	NOT NULL, ShopID	char(12)	NOT NULL, SaleDate	Date	NOT NULL, SaleNumber	Numeric	NOT NULL, SalePrice	Money	NOT NULL, CONSTRAINT	ISBN_FK FOREIGN KEY(ISBN) REFERENCES BookTable(ISBN) 	ON DELETE CASCADE 	ON UPDATE CASCADE, CONSTRAINT	ShopID_FK FOREIGN KEY(ShopID) REFERENCES ShopTable(ShopID) 	ON DELETE CASCADE 	ON UPDATE CASCADE	 );  CREATE TABLE StoreTable ( ShopID	char(12)	NOT NULL, ISBN	char(22)	NOT NULL, StoreNumber	int2	NOT NULL, CONSTRAINT	StoreTable_PK	PRIMARY KEY(ShopID,ISBN), CONSTRAINT	ISBN_FK FOREIGN KEY(ISBN) REFERENCES BookTable(ISBN) 	ON DELETE CASCADE 	ON UPDATE CASCADE, CONSTRAINT	ShopID_FK FOREIGN KEY(ShopID) REFERENCES ShopTable(ShopID) 	ON DELETE CASCADE 	ON UPDATE CASCADE );  CREATE TABLE WriteRankTable ( AuthorID	char(12)	NOT NULL, ISBN		char(22)	NOT NULL, RankOrder	int2		NOT NULL, CONSTRAINT	WriteRankTable_PK	PRIMARY KEY(AuthorID,ISBN), CONSTRAINT	ISBN_FK FOREIGN KEY(ISBN) REFERENCES BookTable(ISBN) 	ON DELETE CASCADE 	ON UPDATE CASCADE, CONSTRAINT	AuthorID_FK FOREIGN KEY(AuthorID) REFERENCES AuthorTable(AuthorID) 	ON DELETE CASCADE 	ON UPDATE CASCADE ); 以下是建视图语句，以建立图书的视图为例： CREATE VIEW BookView AS SELECT ISBN,PublisherID,Bookname,BookPrice FROM BookTable; 索引的话，针对所有的主键建立， 下面以图书表为例建立索引： CREATE INDEX Book_Idx ON BookTable (ISBN); 3.对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 以BookKindTable表的增改删查为例进行演示。 INSERT INTO BookKindTable VALUES('00001','教科书'); INSERT INTO BookKindTable VALUES('00002','课内辅导书'); INSERT INTO BookKindTable VALUES('00003','课外书'); SELECT * FROM BookKindTable; 结果如下图  然后，删除第三行，将第二行kindname修改为课外书 DELETE FROM BookKindTable WHERE kindid='00003'; UPDATE BookKindTable SET kindname='课外书' WHERE kindid='00002'; SELECT * FROM BookKindTable; 结果如下：  4.编写函数Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 create or replace function Pro_CurrentSale() returns record as  $$ 	declare count1 record; 	begin 		select sum(salenumber) as salenumber,sum(saleprice) as saleprice into count1 FROM saletable WHERE saledate=current_date; 		return count1; 	end $$ language plpgsql; 然后我们插入示例数据 insert into publishertable values('000000000001','高等教育出版社','13888888888','天安门广场'); insert into booktable values('978-7-115-50247-2','000000000001','00001','数据库原理','2005-6-12',388,'主要讲了数据库的应用','数据库操作，存储过程'); insert into booktable values('978-7-115-50247-3','000000000001','00001','操作系统','2005-6-12',298,'主要讲了操作系统的应用','操作系统操作，哲学家问题'); insert into shoptable values('000000000001','新华书店','12345','北京天坛广场'); insert into saletable values(10,'978-7-115-50247-2','000000000001','2019-6-21',3,600); insert into saletable values(11,'978-7-115-50247-3','000000000001','2019-6-21',2,300); 5.编写过程语句块，实现对函数Pro_CurrentSale的调用，并输出统计结果。 调用存储过程： Select Pro_CurrentSale(); 结果如下：  结果完全正确。 6.编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 首先建立触发器调用的存储过程 create or replace function Pro_InsertSale() returns trigger as $$ 	declare salenumber1 integer; 	begin 		select salenumber into salenumber1 FROM saletable; 		update storetable set storenumber = storenumber-salenumber1 where new.shopid=shopid and new.isbn=isbn; 		return null; 	end $$ language plpgsql; 然后建立需要的触发器 create trigger Tri_InsertSale AFTER INSERT ON saletable FOR EACH ROW EXECUTE PROCEDURE Pro_InsertSale(); 然后输入如下信息，插入并验算结果是否正确： insert into storetable values('000000000001','978-7-115-50247-2',100); insert into saletable values(13,'978-7-115-50247-2','000000000001','2019-6-21',3,600); select * from storetable; 结果输入如下图：  值变为了97，说明结果正确  九、总结及心得体会： 通过本次实验，我熟练掌握了SQL语句的增删改查操作，并可以建立触发器以及存储过程，对它们的理解从理论层面上升到了操作层面，老师精心设计的例子，对每个部分的知识点都有所考察，起到了很好的查漏补缺效果。 十、对本实验过程及方法、手段的改进建议：无                                                      报告评分：                                          指导教师签字： 电子科技大学信息与软件工程学院    实 验 报 告    学    号     2017221303006     姓    名       董佳宇          （实验）	课程名称    数据库原理及应用   理论教师        文军           实验教师       何中海              电子科技大学教务处制表    电 子 科 技 大 学 实   验   报   告 学生姓名：董佳宇		学号：2017221303006    指导教师：何中海 实验地点：信软实验楼303     实验时间：2019/6/21 一、实验名称：图书销售管理系统数据库安全管理 二、实验学时：3学时 三、实验目的： 对图书销售管理系统数据库进行系统安全管理。了解该DBMS系统对数据库管理的内容与方法，特别是理解数据库安全机制和作用，以及PostgreSQL数据库角色管理、用户管理、权限管理的基本方法，培养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并完成上述角色与用户的权限管理。 四、实验原理： 相关SQL语句。 五、实验内容： （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。 （2）在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 （3）在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 （4）在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 （5）分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 六、实验器材（设备、元器件）：   具有WINDOWS10系统的计算机一台。 七、实验步骤： 首先分析角色的种类以及其该拥有的权限，然后创建角色，并为其赋予角色权限，进而创建用户，为用户赋予角色，使其拥有角色的权限，最后在命令行中用用户对数据库进行操作，检查权限是否正确。 八、实验结果与分析（含重要数据结果分析或核心代码流程分析）： （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。 我们在这个数据库中，将角色分为了两个部分：商家和客户，针对我的十个表，我们可以得知的权限关系如下表所示：  （2）在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 利用create role即可，代码如下: CREATE ROLE R_Customer; CREATE ROLE R_Seller; 结果如下：  （3）在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 	利用grant语句即可，以（1）分析结果进行赋予权限： GRANT SELECT ON Authortable TO R_Customer; GRANT SELECT ON Bookkindtable TO R_Customer; GRANT SELECT ON Booktable TO R_Customer; GRANT SELECT ON discounttable TO R_Customer; GRANT SELECT ON locationtable TO R_Customer; GRANT SELECT ON publishertable TO R_Customer; GRANT SELECT ON saletable TO R_Customer; GRANT SELECT ON shoptable TO R_Customer; GRANT SELECT ON storetable TO R_Customer; GRANT SELECT ON writeranktable TO R_Customer;  GRANT SELECT ON Authortable TO R_Seller; GRANT SELECT ON Bookkindtable TO R_Seller; GRANT SELECT,UPDATE,DELETE,INSERT ON Booktable TO R_Seller; GRANT SELECT,UPDATE,DELETE,INSERT ON discounttable TO R_Seller; GRANT SELECT ON locationtable TO R_Seller; GRANT SELECT ON publishertable TO R_Seller; GRANT SELECT,INSERT ON saletable TO R_Seller; GRANT SELECT,UPDATE,DELETE,INSERT ON shoptable TO R_Seller; GRANT SELECT,UPDATE,DELETE,INSERT ON storetable TO R_Seller; GRANT SELECT ON writeranktable TO R_Seller; 结果如下：  （4）在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 （5）分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 代码如下： CREATE USER U_Customer 	PASSWORD '12345678' 	IN ROLE R_Customer; CREATE USER U_Seller 	PASSWORD '12345678' 	IN ROLE R_Seller; 结果如下：  （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 为了验证角色的权限，我打开了SQL Shell来进行检验。首先是U_Customer，如下图所示：  其次是U_Seller，如下图所示：  实验结果均正确且满足要求。 九、总结及心得体会： 对于数据库的权限控制，可以先将用户划分为几类角色，然后对每一类的角色赋予相应的权限即可很好的实现,而不必为每个用户逐个授权，这尤其适用于用户量较多的系统中。  十、对本实验过程及方法、手段的改进建议：无                                                      报告评分：                                          指导教师签字： 