
电 子 科 技 大 学 实   验   报   告  一、实验一：图书销售管理系统数据库SQL应用编程 二、实验室名称：信软楼305	           实验时间：2019.6.10  三、实验目的 针对图书销售管理数据库开发，了解SQL语言DDL、DML、DQL类型语句在数据库操作访问中的应用方法，培养数据库SQL编程访问能力。同时也掌握基本的数据库触发器、存储过程SQL编程方法，培养数据库后端编程能力。本实验完成图书销售管理系统数据库的SQL数据操作访问和后端数据处理功能。 四、实验原理 SQL（Structured Query Language），结构化查询语言，它是一种对数据库进行 访问与操作的数据子语言。SQL可嵌入到编程语言(如JAVA、C#等)中执行或在DBS工具中执行。 SQL不仅仅是一个查询工具，还用于控制DBS提供给用户的所有功能。 在PostgreSQL服务器中，通过执行SQL语句对数据库进行各种操作。 五、实验内容 使用JetBrains DataGrip数据库管理工具对图书销售管理系统数据库进行SQL编程操作，并完成触发器、存储过程后端编程，具体实验内容如下: （1）图书销售管理系统数据库BookSale创建操作 （2）在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 （3）对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 （4）编写存储过程Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 （5）编写过程语句块，实现对存储过程Pro_CurrentSale的调用，并输出统计结果。 （6）编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 （7）对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。 在实验计算机上，利用JetBrains DataGrip数据库管理工具及SQL语句，完成图书销售管理系统数据库SQL应用编程操作，同时记录实验过程的步骤、操作、运行结果界面等数据，为撰写实验报告提供素材。 六、实验设备及环境 “数据库原理及应用”实验所涉及的机房硬件设备为pc计算机、服务器以及网络环境，pc计算机与服务器在同一局域网络。 操作系统： Windows10 管理工具： JetBrains DataGrip DBS系统： PostgreSQL 11 七、实验步骤 创建图书销售管理系统数据库BookSale 在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 编写存储过程Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计 编写过程语句块，实现对存储过程Pro_CurrentSale的调用，并输出统计结果 编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理 对图书销售表Insert触发器Tri_InsertSale程序进行功能验证 八、实验数据及结果分析 创建图书销售管理系统数据库BookSale CREATE DATABASE BookSale  在图书销售管理系统数据库BookSale中创建数据库表、视图、索引等对象 CREATE TABLE publish( 	publishNo CHAR(12) PRIMARY KEY, 	publishName varchar(40), 	publishPhone varchar(20), 	publishAddress varchar(60) ); CREATE TABLE author( 	authorNo char(12) PRIMARY KEY, 	authorName char(6), 	authorAddress varchar(80), 	authorPhone char(11) ); CREATE TABLE book( 	bookISBN CHAR(22) PRIMARY KEY, 	publishNo char(12), 	bookName varchar(80), 	authorNo char(12), 	price money, 	bookContent text, 	constraint publishNo_FK foreign key(publishNo) 	references publish(publishNo) 	on update cascade, 	constraint authorNo_FK foreign key(authorNo) 	references author(authorNo) 	on update cascade ); CREATE TABLE store( 	bookISBN char(22) PRIMARY KEY, 	storeNum int2, 	constraint bookISBN_FK foreign key(bookISBN) 	references book(bookISBN) 	on update cascade ); CREATE TABLE sale( 	saleNo serial PRIMARY KEY, 	bookISBN char(22), 	saleDate date, 	saleNum numeric, 	saleSum money, 	constraint bookISBN_FK foreign key(bookISBN) 	references book(bookISBN) 	on update cascade )  CREATE INDEX ISBN ON book(bookISBN);    CREATE VIEW priceView AS  SELECT* FROM book WHERE price<'30'   对图书销售管理系统数据库表进行数据增、删、查、改SQL操作 增： INSERT INTO author VALUES('001','鲁迅','绍兴','11111111111'); INSERT INTO author VALUES('002','周树人','浙江','22222222222'); INSERT INTO author VALUES('003','刘大','河北','33333333333'); INSERT INTO author VALUES('004','王二麻子','广东','44444444444'); 	  INSERT INTO publish VALUES('01','中国人民大学出版社','3367454','北京市'); INSERT INTO publish VALUES('02','机械工业出版社','884561','河北');  INSERT INTO book VALUES('1','01','神曲','003','23','第一章第二章第三章'); INSERT INTO book VALUES('2','02','哈姆雷特','004','46','第四章第二章第三章');  INSERT INTO sale VALUES('0001','1','2019-6-10','2','46'); INSERT INTO sale VALUES('0002','2','2019-6-9','1','46');  INSERT INTO store VALUES('1','35'); INSERT INTO store VALUES('2','85');  改： UPDATE author  SET authorName ='但丁' WHERE authorName ='刘大'   删： delete  from author where authorname='周树人'   查： select * from author join book on author.authorno=book.authorno where bookname='神曲'  编写存储过程Pro_CurrentSale，实现当日图书销售量及销售金额汇总统计。 create or replace function Pro_CurrentSale(out numsum numeric,out moneysum money)  as $current$ declare 	numsum numeric;moneysum money; begin 	select sum(salenum) into $1 as salenum from sale 	where saledate=current_date; 	select sum(salesum) into $2 as salesum from sale 	where saledate=current_date; end; $current$ language plpgsql;  编写过程语句块，实现对存储过程Pro_CurrentSale的调用，并输出统计结果。 select Pro_CurrentSale()  编写图书销售表Insert触发器Tri_InsertSale，实现图书库存数据同步修改处理。 create or replace function change()        returns trigger as $change$        begin               raise notice '1';               if(TG_OP = 'INSERT') then                      raise notice '2';                      update store set storenum = storenum - new.salenum                      where bookisbn = new.bookisbn;                      raise notice '3';               end if;        return null;        end;        $change$ language plpgsql;  create trigger Tri_InsertSale after insert on sale for each row execute procedure change();   对图书销售表Insert触发器Tri_InsertSale程序进行功能验证。 使用Insert操作之前：  对sale表进行Insert操作：  触发器出发之后：  九、总结及心得体会 通过此次实验熟悉了数据库各种基本SQL语句的使用，熟悉了对数据库管理工具Jetbrains DataGrip的使用，理解了数据库中各种类型数据的存储方法和数据之间的约束关系。 
 电 子 科 技 大 学 实   验   报   告  一、实验二：图书销售管理系统数据库安全管理 二、实验室名称：信软楼305	           实验时间：2019.6.10  三、实验目的 了解该DBS系统对数据库管理的内容与方法，特别是理解数据库安全机制和作用，以及PostgreSQL数据库角色管理、用户管理、权限管理的基本方法，培养数据库管理能力。在图书销售管理系统数据库中，创建必要的角色和用户，并完成上述角色与用户的权限管理。 四、实验原理 在SQL语言中，数据控制SQL语句是一种可对用户数据访问权进行控制 的操作语句，它可以控制特定用户或角色对数据表、视图、存储过程、 触发器等数据库对象的访问权限 	用户要访问数据库，必须先在DBS中创建其账号，并成为 数据库的用户。此后，用户每次访问数据库，都需要在 DBS进行身份验证，只有合法用户才能进入系统，访问操 作数据库对象。在DBS中，为了方便对众多用户及其权限进行管理，通常 将一组具有相同权限的用户定义为角色(Role)。 五、实验内容 使用JetBrains DataGrip数据库管理工具对图书销售管理系统数据库进行数据库安全管理，具体实验内容如下: （1）针对图书销售管理系统数据库，设计数据存取权限控制模型。 （2）在数据库中，创建客户（R_Customer）、商家（R_Seller）角色。 （3）在数据库中，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 （4）在数据库中，分别创建客户用户U_Customer、商家用户U_Seller。 （5）分别为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 （6）分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 在实验计算机上，利用JetBrains DataGrip数据库管理工具及SQL语句，完成图书销售管理系统数据库安全管理，同时记录实验过程的步骤、操作、运行结果界面等数据，为撰写实验报告提供素材。 六、实验设备及环境 “数据库原理及应用”实验所涉及的机房硬件设备为pc计算机、服务器以及网络环境，pc计算机与服务器在同一局域网络。 操作系统： Windows10 管理工具： JetBrains DataGrip DBS系统： PostgreSQL 11 七、实验步骤 针对图书销售管理系统数据库，设计数据存取权限控制模型。在数据库中，创建客户（R_Customer）、商家（R_Seller）角色，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 在数据库中，分别创建客户用户U_Customer、商家用户U_Seller并为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 八、实验数据及结果分析 针对图书销售管理系统数据库，设计数据存取权限控制模型。在数据库中，创建客户（R_Customer）、商家（R_Seller）角色，根据业务规则为客户（R_Customer）、商家（R_Seller）角色赋予数据库对象权限。 CREATE ROLE "R_Customer" WITH  	LOGIN  	NOSUPERUSER  	NOCREATEDB  	NOCREATEROLE  	INHERIT  	NOREPLICATION  	NOBYPASSRLS 	CONNECTION LIMIT -1; CREATE ROLE "R_Seller" WITH  	LOGIN  	NOSUPERUSER  	NOCREATEDB  	NOCREATEROLE  	INHERIT  	NOREPLICATION  	NOBYPASSRLS 	CONNECTION LIMIT -1;  GRANT SELECT,INSERT,UPDATE,DELETE ON book TO "R_Seller";  GRANT SELECT,INSERT,UPDATE,DELETE ON sale TO "R_Seller";  GRANT SELECT,INSERT,UPDATE,DELETE ON store TO "R_Seller";  GRANT SELECT ON book TO "R_Customer"; GRANT SELECT ON sale TO "R_Customer"; GRANT SELECT ON store TO "R_Customer";  在数据库中，分别创建客户用户U_Customer、商家用户U_Seller并为客户用户U_Customer、商家用户U_Seller分派客户（R_Client）、商家（R_Seller）角色。 create user "U_Customer" with 	in role "R_Customer"; create user "U_Seller" with 	in role "R_Seller";  分别以客户用户U_Customer、商家用户U_Seller身份访问图书销售管理数据库，验证所实现数据存取权限控制模型的正确性。 （1） 以U_Customer登录：  对表sale执行uodate 操作失败： （2） 		以U_Seller登录： 		 		对表sale执行插入操作： 	 九、总结及心得体会 	通过此次实验理解了数据库中用户与角色的关系以及它们的意义，自己动手熟悉了数据库中角色和用户的相关操作